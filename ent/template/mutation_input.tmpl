{{ range $n := $.Nodes }}
    {{ $input := print "Create" $n.Name "Input" }}
    // {{ $input }} represents a mutation input for creating {{ plural $n.Name | lower }}.
    type {{ $input }} struct {
    {{- range $f := $n.Fields }}
        {{ $f.StructField }} {{ if and (or $f.Optional $f.Default) (not $f.Type.RType.IsPtr) }}*{{ end }}{{ $f.Type }}
    {{- end }}
    {{- range $e := $n.Edges }}
        {{- if $e.Unique }}
            {{ $e.StructField }} {{ if $e.Optional }}*{{ end }}{{ $e.Type.ID.Type }}
        {{- else }}
            {{ $e.StructField }} []{{ $e.Type.ID.Type }}
        {{- end }}
    {{- end }}
    }

    {{/* Additional methods go here.  */}}

    {{ $input = print "Update" $n.Name "Input" }}
    // {{ $input }} represents a mutation input for updating {{ plural $n.Name | lower }}.
    type {{ $input }} struct {
    {{- range $f := $n.MutableFields }}
        {{ $f.StructField }} {{ if not $f.Type.RType.IsPtr }}*{{ end }}{{ $f.Type }}
        {{- if $f.Optional }}
            {{ print "Clear" $f.StructField }} bool
        {{- end }}
    {{- end }}
    {{- range $e := $n.Edges }}
        {{- if $e.Unique }}
            {{ $e.StructField }} *{{ $e.Type.ID.Type }}
            {{ $e.MutationClear }} bool
        {{- else }}
            {{ $e.MutationAdd }} []{{ $e.Type.ID.Type }}
            {{ $e.MutationRemove }} []{{ $e.Type.ID.Type }}
        {{- end }}
    {{- end }}
    }

    {{/* Additional methods go here.  */}}
{{ end }}
